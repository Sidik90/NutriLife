from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.inline import get_main_menu, get_contact_choice, get_cancel_keyboard
from database.db import save_contact
from utils.logger import logger

router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
class ContactStates(StatesGroup):
    NAME = State()
    CONTACT_INFO = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
@router.callback_query(F.data == "contact")
async def start_contact(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Å–≤—è–∑–∏")
    await callback_query.message.edit_text("–û—Å—Ç–∞–≤—å—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏?", reply_markup=get_contact_choice())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–î–∞, –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ"
@router.callback_query(F.data == "contact_yes")
async def process_contact_yes(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
    await state.update_data(is_callback=True)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(ContactStates.NAME)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.callback_query(ContactStates.NAME, F.data == "cancel")
async def cancel_contact(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    await state.clear()
    await callback_query.message.edit_text("–í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_menu())
    await callback_query.answer()

@router.message(ContactStates.NAME)
async def process_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è: {name}")
    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email:", reply_markup=get_cancel_keyboard())
    await state.set_state(ContactStates.CONTACT_INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@router.callback_query(ContactStates.CONTACT_INFO, F.data == "cancel")
async def cancel_contact_info(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    await state.clear()
    await callback_query.message.edit_text("–í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_menu())
    await callback_query.answer()

@router.message(ContactStates.CONTACT_INFO)
async def process_contact_info(message: Message, state: FSMContext):
    user_id = message.from_user.id
    contact_info = message.text
    data = await state.get_data()
    name = data.get("name")
    is_callback = data.get("is_callback", False)
    await save_contact(user_id, name, contact_info)
    if is_callback:
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, {name}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –ø–æ {contact_info} üìû", reply_markup=get_main_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫: {contact_info}")
    await state.clear()