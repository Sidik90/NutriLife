from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.inline import get_main_menu, get_cancel_keyboard
from database.db import get_bju_from_local_db
from utils.logger import logger

router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ë–ñ–£
class BJUStates(StatesGroup):
    PRODUCT = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–†–∞—Å—á–µ—Ç –ë–ñ–£"
@router.callback_query(F.data == "bju_calc")
async def start_bju_calc(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞—Å—á–µ—Ç –ë–ñ–£")
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∏–ª–∏ 'AI' –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò):", reply_markup=get_cancel_keyboard())
    await state.set_state(BJUStates.PRODUCT)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@router.callback_query(BJUStates.PRODUCT, F.data == "cancel")
async def cancel_bju(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—á–µ—Ç –ë–ñ–£")
    await state.clear()
    await callback_query.message.edit_text("–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_menu())
    await callback_query.answer()

@router.message(BJUStates.PRODUCT, F.text == ["AI", "ai", "Ai"])
async def process_ai_request(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ—É–Ω–∫—Ü–∏—é AI –¥–ª—è –ë–ñ–£")
    await message.answer("–§—É–Ω–∫—Ü–∏—è '–°–ø—Ä–æ—Å–∏ —É AI' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üöß", reply_markup=get_main_menu())
    await state.clear()

@router.message(BJUStates.PRODUCT)
async def process_product(message: Message, state: FSMContext):
    user_id = message.from_user.id
    product = message.text.lower()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ë–ñ–£ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    data = await get_bju_from_local_db(product)
    if data:
        result_text = f"–ü—Ä–æ–¥—É–∫—Ç: {product.capitalize()}\n–ë–µ–ª–∫–∏: {data['b']} –≥\n–ñ–∏—Ä—ã: {data['j']} –≥\n–£–≥–ª–µ–≤–æ–¥—ã: {data['u']} –≥\n–ö–∞–ª–æ—Ä–∏–∏: {data['kcal']} –∫–∫–∞–ª"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product}")
    else:
        result_text = "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π. üîç"
        logger.warning(f"–ü—Ä–æ–¥—É–∫—Ç {product} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await message.answer(result_text, reply_markup=get_main_menu())
    await state.clear()