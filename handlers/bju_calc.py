from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.inline import get_main_menu, get_cancel_keyboard
from database.db import get_bju_from_local_db, recalculate_bju
from utils.logger import logger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ë–ñ–£
class BJUStates(StatesGroup):
    PRODUCT = State()
    WEIGHT = State()
    SELECT_PRODUCT = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–†–∞—Å—á–µ—Ç –ë–ñ–£"
@router.callback_query(F.data == "bju_calc")
async def start_bju_calc(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞—Å—á–µ—Ç –ë–ñ–£")
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∏–ª–∏ 'AI' –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò):",
        reply_markup=get_cancel_keyboard(),
    )
    await state.set_state(BJUStates.PRODUCT)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == "cancel")
async def cancel_bju(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—á–µ—Ç –ë–ñ–£")
    await state.clear()
    await callback_query.message.edit_text(
        "–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_menu()
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ AI
@router.message(BJUStates.PRODUCT, F.text.lower().in_(["ai", "ai", "ai"]))
async def process_ai_request(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ—É–Ω–∫—Ü–∏—é AI –¥–ª—è –ë–ñ–£")
    await message.answer(
        "–§—É–Ω–∫—Ü–∏—è '–°–ø—Ä–æ—Å–∏ —É AI' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üöß",
        reply_markup=get_main_menu(),
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(BJUStates.PRODUCT)
async def process_product(message: Message, state: FSMContext):
    user_id = message.from_user.id
    product = message.text.lower()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ë–ñ–£ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    data_list = await get_bju_from_local_db(product)
    if data_list:
        if len(data_list) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å
            await state.update_data(product_data=data_list[0])
            await message.answer(
                f"–ü—Ä–æ–¥—É–∫—Ç: {data_list[0]['name'].capitalize()}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 –≥):",
                reply_markup=get_cancel_keyboard(),
            )
            await state.set_state(BJUStates.WEIGHT)
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for idx, product_data in enumerate(data_list):
                keyboard.inline_keyboard.append(
                    [
                        InlineKeyboardButton(
                            text=product_data["name"].capitalize(),
                            callback_data=f"select_product_{idx}",
                        )
                    ]
                )
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            )
            await state.update_data(product_list=data_list)
            await message.answer(
                "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω:", reply_markup=keyboard
            )
            await state.set_state(BJUStates.SELECT_PRODUCT)
    else:
        result_text = "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π. üîç"
        logger.warning(f"–ü—Ä–æ–¥—É–∫—Ç {product} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(result_text, reply_markup=get_main_menu())
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(BJUStates.SELECT_PRODUCT, F.data.startswith("select_product_"))
async def select_product(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    idx = int(callback_query.data.split("_")[-1])
    user_data = await state.get_data()
    product_data = user_data.get("product_list", [])[idx]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥—É–∫—Ç: {product_data['name']}")
    await state.update_data(product_data=product_data)
    await callback_query.message.edit_text(
        f"–ü—Ä–æ–¥—É–∫—Ç: {product_data['name'].capitalize()}\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 –≥):",
        reply_markup=get_cancel_keyboard(),
    )
    await state.set_state(BJUStates.WEIGHT)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
@router.message(BJUStates.WEIGHT)
async def process_weight(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    product_data = user_data.get("product_data", {})
    try:
        weight = float(message.text)
        if weight <= 0:
            await message.answer(
                "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_cancel_keyboard(),
            )
            return
        recalculated_data = recalculate_bju(product_data, weight)
        result_text = (
            f"–ü—Ä–æ–¥—É–∫—Ç: {recalculated_data['name'].capitalize()}\n"
            f"–í–µ—Å: {recalculated_data['weight']} –≥\n"
            f"–ë–µ–ª–∫–∏: {recalculated_data['b']} –≥\n"
            f"–ñ–∏—Ä—ã: {recalculated_data['j']} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {recalculated_data['u']} –≥\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {recalculated_data['kcal']} –∫–∫–∞–ª"
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ {recalculated_data['name']} –¥–ª—è –≤–µ—Å–∞ {weight} –≥"
        )
    except ValueError:
        recalculated_data = product_data
        result_text = (
            f"–ü—Ä–æ–¥—É–∫—Ç: {recalculated_data['name'].capitalize()}\n"
            f"–í–µ—Å: {recalculated_data['weight']} –≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
            f"–ë–µ–ª–∫–∏: {recalculated_data['b']} –≥\n"
            f"–ñ–∏—Ä—ã: {recalculated_data['j']} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {recalculated_data['u']} –≥\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {recalculated_data['kcal']} –∫–∫–∞–ª"
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —É–∫–∞–∑–∞–ª –≤–µ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ—Å –¥–ª—è {recalculated_data['name']}"
        )
    await message.answer(result_text, reply_markup=get_main_menu())
    await state.clear()
