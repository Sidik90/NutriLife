from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.inline import get_quiz_options, get_main_menu
from utils.logger import logger

router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–≤–∏–∑–∞
class QuizStates(StatesGroup):
    QUESTION = State()

# –í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–≤–∏–∑–∞
QUIZ_QUESTIONS = [
    {"text": "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ–ª–µ–∑–Ω–µ–µ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞?", "correct": 1, "image_1": "data/images/quiz/question_1_option_1.jpg", "image_2": "data/images/quiz/question_1_option_2.jpg"},
    {"text": "–ß—Ç–æ –ª—É—á—à–µ –ø–∏—Ç—å —É—Ç—Ä–æ–º?", "correct": 2, "image_1": "data/images/quiz/question_2_option_1.jpg", "image_2": "data/images/quiz/question_2_option_2.jpg"},
    {"text": "–ö–∞–∫–æ–π –ø–µ—Ä–µ–∫—É—Å –ø–æ–ª–µ–∑–Ω–µ–µ?", "correct": 1, "image_1": "data/images/quiz/question_3_option_1.jpg", "image_2": "data/images/quiz/question_3_option_2.jpg"},
    {"text": "–ß—Ç–æ –ª—É—á—à–µ –¥–ª—è —É–∂–∏–Ω–∞?", "correct": 2, "image_1": "data/images/quiz/question_4_option_1.jpg", "image_2": "data/images/quiz/question_4_option_2.jpg"},
    {"text": "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –±–æ–≥–∞—Ç –±–µ–ª–∫–æ–º?", "correct": 1, "image_1": "data/images/quiz/question_5_option_1.jpg", "image_2": "data/images/quiz/question_5_option_2.jpg"},
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–°—ã–≥—Ä–∞—Ç—å –≤ –∫–≤–∏–∑"
@router.callback_query(F.data == "quiz")
async def start_quiz(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∫–≤–∏–∑")
    await state.update_data(question_index=0, score=0)
    question = QUIZ_QUESTIONS[0]
    try:
        await callback_query.message.bot.send_photo(chat_id=user_id, photo=FSInputFile(question["image_1"]), caption=question["text"], reply_markup=get_quiz_options(0))
        await callback_query.message.bot.send_photo(chat_id=user_id, photo=FSInputFile(question["image_2"]))
    except FileNotFoundError:
        await callback_query.message.bot.send_message(chat_id=user_id, text=f"{question['text']} (–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ!)", reply_markup=get_quiz_options(0))
    await state.set_state(QuizStates.QUESTION)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞
@router.callback_query(QuizStates.QUESTION, F.data.startswith("quiz_"))
async def process_quiz_answer(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    data = await state.get_data()
    question_index = data.get("question_index", 0)
    score = data.get("score", 0)
    answer = int(callback_query.data.split("_")[-1])
    correct_answer = QUIZ_QUESTIONS[question_index]["correct"]

    if answer == correct_answer:
        score += 1
        await callback_query.message.edit_caption(caption="–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_index + 1}")
    else:
        await callback_query.message.edit_caption(caption="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. ‚ùå")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_index + 1}")

    question_index += 1
    await state.update_data(question_index=question_index, score=score)

    if question_index < len(QUIZ_QUESTIONS):
        question = QUIZ_QUESTIONS[question_index]
        try:
            await callback_query.message.bot.send_photo(chat_id=user_id, photo=FSInputFile(question["image_1"]),
                                                        caption=question["text"],
                                                        reply_markup=get_quiz_options(question_index))
            await callback_query.message.bot.send_photo(chat_id=user_id, photo=FSInputFile(question["image_2"]))
        except FileNotFoundError:
            await callback_query.message.bot.send_message(chat_id=user_id,
                                                          text=f"{question['text']} (–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ!)",
                                                          reply_markup=get_quiz_options(question_index))
    else:
        await callback_query.message.bot.send_message(chat_id=user_id,
                                                      text=f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(QUIZ_QUESTIONS)} üéâ",
                                                      reply_markup=get_main_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–∏–∑ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score}/{len(QUIZ_QUESTIONS)}")
        await state.clear()
    await callback_query.answer()